<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javascript on Lucas Santos</title><link>https://lucassan.github.io/tags/javascript/</link><description>Recent content in Javascript on Lucas Santos</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 26 Jun 2021 21:56:20 +0300</lastBuildDate><atom:link href="https://lucassan.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>The One with Event-Driven Architecture</title><link>https://lucassan.github.io/2021-06-26-event-driven/</link><pubDate>Sat, 26 Jun 2021 21:56:20 +0300</pubDate><guid>https://lucassan.github.io/2021-06-26-event-driven/</guid><description>The Event-Driven Architecture grows in popularity in the last couple years, but how Lambda fits into the event-driven paradigm ?
The difference between event-driven and request-driven applications may not be clear in small applications but once your application develop more functionality and handle more traffic, this becomes more apparent.
Request-driven application typically use directed commands to coordinate downstream functions to complete an activity and are tightly, meanwhile Event-drive applications create events that are observable by other services and systems, but the event producer is unaware of which consumers, if any, are listening.</description></item><item><title>The One with Queue Theory</title><link>https://lucassan.github.io/2021-06-06-queue-theory/</link><pubDate>Sun, 06 Jun 2021 15:07:00 +0300</pubDate><guid>https://lucassan.github.io/2021-06-06-queue-theory/</guid><description>Have you ever think about the math behind a Queue ?
[I&amp;rsquo;ll assume that you said no, that&amp;rsquo;s why I&amp;rsquo;m posting this]
So, let&amp;rsquo;s talk a little bit about the Queue Theory
[Drumrolls begin]
What its a Queue ? Its basically a line, or a sequence of anything, awaiting their turn to be attended ot preceed.
Examples of Queues Shoppers in a checkout line Patients in a waiting room Lines to use the toilets Lines to use ATM&amp;rsquo;s So, whats the deal of Queue Theory ?</description></item><item><title>The One with Event Loop in Javascript</title><link>https://lucassan.github.io/2020-06-24-event-loop/</link><pubDate>Wed, 24 Jun 2020 00:00:00 +0300</pubDate><guid>https://lucassan.github.io/2020-06-24-event-loop/</guid><description>In this post, I&amp;rsquo;d like to share my talk at Nerdz√£o Meetup about Event Loop in Javascript, I hope you enjoy it! =)</description></item><item><title>The One with Var, Let and Const</title><link>https://lucassan.github.io/2020-04-29-var-let-const/</link><pubDate>Wed, 29 Apr 2020 21:15:20 +0300</pubDate><guid>https://lucassan.github.io/2020-04-29-var-let-const/</guid><description>[May I have your attention please]
Before we start to talk (or write) about the difference between Var, Let and Const, we need to know two main concepts called Scope and Block, and to explain this I need your full atention please.
So, what is Scope ? Scope means where a declared variable is available for use.
There it is! I told ya, very complicated isn&amp;rsquo;t !? ;)
What about Block ?</description></item><item><title>The One with Shallow Copy and Deep Copy</title><link>https://lucassan.github.io/2020-04-19-shallow-copy-deep-copy/</link><pubDate>Sun, 19 Apr 2020 13:32:20 +0300</pubDate><guid>https://lucassan.github.io/2020-04-19-shallow-copy-deep-copy/</guid><description>Have you ever wonder how objects are cloned or copied ?
[I&amp;rsquo;ll assume that you said no]
So, let me introduce you how a Shallow Copy and a Deep Copy works and the difference between them
[Drumrolls begin]
Shallow Copy It basically get the reference from the source object and put into the target object. Think about it as a copy of the source object address. So, the addresses of the source object and target object will be the same i.</description></item></channel></rss>